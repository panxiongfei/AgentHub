# AgentHub 项目开发规则 v2.1.3

## 📋 文档状态
- **版本**: v2.1.3
- **最后更新**: 2025-06-02  
- **当前里程碑**: ✅ v2.1.0 基础设施完成，🚀 v2.2.0 多平台集成优化中

## 项目概述
AgentHub 是一个企业级多平台 AI 代理服务自动化平台，作为多个 AI 平台的统一入口和自动化枢纽。项目已完成完整的前后端分离架构（Vue.js + FastAPI）、AI模型集成（Google Gemini 2.5 Flash）、智能浏览器引擎、回归测试系统和安全的文件隔离机制。当前重点是多平台集成优化和生产环境部署完善。

**当前版本**: v2.1.3 ✅ (AI增强系统完成)  
**主要特性**: AI增强浏览器引擎、多模型支持、回归测试系统、安全的开发工作流、完整的文件隔离机制

## 🎯 当前开发状态

### ✅ 已完成的核心功能 (v2.1.3)
- **🧠 AI模型集成系统**: Google Gemini 2.5 Flash + 多提供商架构，统一模型客户端管理
- **🤖 AI增强浏览器引擎**: 智能页面分析、元素定位、操作策略生成
- **📁 AI文件处理系统**: 多格式文件智能分析、预览生成、内容总结
- **🔧 回归测试系统**: 全面自动化测试，成功率监控，定时健康检查
- **🏗️ 完整基础设施**: 前后端分离架构、Web管理界面、API服务
- **🔒 安全文件隔离**: 本地开发与GitHub发布完全隔离，敏感信息保护
- **📊 多平台历史任务管理**: 37个历史任务数据，支持Manus、Skywork、Coze Space等平台

### 🚀 当前开发重点 (v2.2.0)
- **多平台集成优化**: 基于已有AI能力深化Manus、Skywork平台集成
- **前端服务稳定性**: 解决前端服务启动和持续运行问题
- **Chrome连接优化**: 增强浏览器会话管理和多实例支持
- **生产环境部署**: Docker化部署、监控告警、性能优化

## 技术栈

### 核心框架 ✅
- **前端框架**: Vue.js 3 + Element Plus + Vite + Pinia
- **后端框架**: FastAPI + SQLAlchemy + Structlog + APScheduler
- **🧠 AI模型集成**: Google Gemini 2.5 Flash (主要) + OpenAI/Anthropic支持
- **🤖 浏览器自动化**: Playwright + Chrome DevTools Protocol + AI增强引擎
- **🔧 测试框架**: 自定义回归测试系统 + pytest
- **数据存储**: SQLite + SQLAlchemy + 文件系统
- **配置管理**: Pydantic Settings + YAML + 环境变量
- **日志系统**: structlog (结构化日志)
- **安全机制**: cryptography + 文件隔离 + API密钥保护

### 🧠 AI增强技术栈 (已完成)
- **统一模型客户端**: ModelClientManager 支持多提供商切换
- **智能页面分析**: AI自动识别页面结构和交互元素
- **智能元素定位**: AI生成最佳选择器策略，置信度评分
- **智能文件处理**: 多格式文件分析、预览生成、内容总结
- **操作策略生成**: AI驱动的最优浏览器操作流程
- **容错和降级**: JSON解析失败自动降级，网络异常恢复

### 🔧 回归测试技术栈 (已完成)
- **全面测试覆盖**: 后台服务7项 + 前台应用4项，总计11项核心测试
- **自动扩展机制**: 新功能自动添加对应测试项
- **详细报告系统**: JSON格式报告，成功率统计，失败原因分析
- **定时执行**: 每天8点和20点自动运行
- **CI/CD集成**: Git推送、部署、手动触发等场景支持

### 🔒 安全与隔离机制 (已完成)
- **文件分类系统**: GitHub公开(.sample) vs 本地私有(.local, .env)
- **自动环境设置**: scripts/dev_env_setup.sh 一键开发环境
- **安全发布流程**: scripts/prepare_release.sh 自动安全扫描
- **API密钥保护**: 多层防护，自动泄露检测
- **配置模板化**: 示例配置与真实配置完全分离

## 核心架构原则

### 1. 🧠 AI优先架构 (已实现)
- **AI驱动决策**: 页面分析、元素定位、操作策略均由AI生成
- **多模型支持**: 统一接口支持Google Gemini、OpenAI、Anthropic等
- **智能容错**: AI分析失败时自动降级到传统方法
- **持续学习**: 操作结果反馈用于优化AI决策
- **多模态分析**: 支持文本、图像的综合分析

### 2. 🔧 测试驱动开发 (已实现)
- **回归测试优先**: 每次代码变更必须通过回归测试
- **自动扩展覆盖**: 新功能开发自动增加测试项
- **持续监控**: 定时健康检查确保系统稳定
- **详细反馈**: 失败分析和成功率统计
- **质量门禁**: 测试成功率不低于70%才可发布

### 3. 🔒 安全隔离设计 (已实现)
- **开发与发布分离**: 本地开发完全自由，GitHub发布自动安全
- **敏感信息保护**: 多层防护确保API密钥和配置安全
- **自动安全扫描**: 发布前自动检测潜在安全风险
- **配置模板化**: 示例配置指导，真实配置保护
- **审计追踪**: 完整的操作历史和安全日志

### 4. 📊 数据完整性 (已实现)
- **全量数据备份**: 文本、截图、HTML、附件、元数据完整保存
- **AI增强分析**: 自动生成文件预览、摘要、分析报告
- **历史任务管理**: 37个跨平台历史任务数据完整管理
- **结构化存储**: 标准化的数据格式和目录结构
- **智能搜索**: AI驱动的内容搜索和关联分析

## 开发规范

### 代码风格 ✅
- 遵循 PEP 8 编码规范
- 使用 black 进行代码格式化  
- 使用 type hints 进行类型标注
- 函数和类必须有详细的 docstring（Google风格）
- 使用 f-string 进行字符串格式化
- 异步函数优先使用 async/await

### 命名规范 ✅
- 文件名: snake_case.py (如 `model_client.py`, `ai_browser_engine.py`)
- 类名: PascalCase (如 `ModelClientManager`, `AIBrowserEngine`)
- 函数名/变量名: snake_case (如 `analyze_page_structure`, `generate_operation_strategy`)
- 常量: UPPER_CASE (如 `DEFAULT_MODEL_PROVIDER`, `MAX_RETRY_ATTEMPTS`)
- 私有方法: _method_name (如 `_process_ai_response`, `_validate_operation_result`)

### 🧠 AI集成开发规范

#### 统一模型客户端使用
```python
# 标准AI模型调用
from app.core.model_client import get_model_client_manager

async def ai_enhanced_function():
    """AI增强功能示例"""
    model_manager = get_model_client_manager()
    
    try:
        response = await model_manager.analyze_text(
            content="需要分析的内容",
            task_type="页面分析",
            format="json"
        )
        
        # 处理AI响应
        if response.success:
            return response.data
        else:
            # 降级到传统方法
            return fallback_analysis()
            
    except Exception as e:
        logger.error("AI分析失败", error=str(e))
        return fallback_analysis()
```

#### AI增强浏览器操作规范
```python
# AI驱动的浏览器操作
from app.core.browser_engine import AIBrowserEngine

class PlatformAutomator:
    """平台自动化基类"""
    
    def __init__(self):
        self.ai_engine = AIBrowserEngine()
        self.logger = get_logger(self.__class__.__name__)
    
    async def ai_analyze_and_operate(self, task_description: str):
        """AI分析页面并执行操作"""
        try:
            # 1. AI分析页面结构
            page_analysis = await self.ai_engine.analyze_page_structure()
            
            # 2. AI生成操作策略
            strategy = await self.ai_engine.generate_operation_strategy(
                page_analysis, task_description
            )
            
            # 3. 执行AI策略
            result = await self.ai_engine.execute_strategy(strategy)
            
            self.logger.info(
                "AI操作完成",
                task=task_description,
                success=result.success,
                confidence=result.confidence
            )
            
            return result
            
        except Exception as e:
            self.logger.error("AI操作失败", error=str(e))
            raise
```

### 🔧 回归测试开发规范

#### 新功能测试覆盖要求
```python
# 新功能必须添加对应的回归测试项
def test_new_feature():
    """新功能回归测试"""
    try:
        # 1. 功能可用性测试
        result = test_feature_availability()
        assert result.success, "功能不可用"
        
        # 2. 基本功能测试
        basic_result = test_basic_functionality()
        assert basic_result.success, "基本功能测试失败"
        
        # 3. AI增强功能测试（如果适用）
        if has_ai_enhancement():
            ai_result = test_ai_enhancement()
            assert ai_result.success, "AI增强功能测试失败"
        
        return TestResult(success=True, details="新功能测试通过")
        
    except Exception as e:
        return TestResult(success=False, error=str(e))
```

#### 测试失败处理流程
1. **立即停止开发**: 测试失败时不得继续开发新功能
2. **分析失败原因**: 查看详细的测试报告和日志
3. **修复根本问题**: 不仅修复症状，更要解决根本原因
4. **重新测试验证**: 修复后必须重新运行完整回归测试
5. **文档更新**: 更新相关文档和测试用例

### 🔒 安全开发规范

#### 敏感信息处理
```python
# 正确的敏感信息处理方式
from app.core.security import mask_sensitive_data

def log_operation(user_data: dict, api_key: str):
    """安全的日志记录"""
    logger.info(
        "API调用完成",
        user_id=mask_sensitive_data(user_data.get("user_id")),
        api_provider=api_key[:8] + "***",  # 只记录前8位
        response_size=len(response_data)
    )
```

#### 配置管理规范
```python
# 使用环境变量和配置文件的优先级
from app.config.settings import get_settings

def get_api_key(provider: str) -> str:
    """获取API密钥的标准方式"""
    settings = get_settings()
    
    # 优先级: 环境变量 > 本地配置 > 默认值
    env_key = f"{provider.upper()}_API_KEY"
    api_key = os.getenv(env_key) or getattr(settings, f"{provider}_api_key", None)
    
    if not api_key:
        raise ConfigurationError(f"未配置{provider}的API密钥")
    
    return api_key
```

### 项目结构原则 ✅
```
app/
├── core/                           # 核心业务逻辑
│   ├── model_client.py            # ✅ AI模型统一客户端
│   ├── browser_engine.py          # ✅ AI增强浏览器引擎
│   ├── ai_file_processor.py       # ✅ AI文件处理器
│   ├── chrome_connector.py        # Chrome连接模块
│   ├── task_executor.py           # 任务执行器
│   ├── logger.py                  # ✅ 结构化日志
│   └── exceptions.py              # ✅ 自定义异常
├── platforms/                      # 平台适配器
│   ├── platform_base.py           # ✅ 基类
│   ├── manus.py                   # Manus平台
│   ├── skywork.py                 # Skywork平台
│   ├── coze_space.py              # ✅ Coze Space平台
│   └── selectors/                 # 平台选择器定义
├── scheduler/                      # ✅ 任务调度
├── storage/                        # ✅ 数据存储
├── config/                         # ✅ 配置管理
├── utils/                          # ✅ 工具函数
└── api/                           # ✅ Web API

# 测试和工具
regression_test.py                  # ✅ 主回归测试脚本
configs/regression_test_config.yaml # ✅ 回归测试配置
scripts/                           # ✅ 开发和部署脚本
├── dev_env_setup.sh              # ✅ 开发环境设置
├── prepare_release.sh             # ✅ 发布准备
└── run_regression_test.sh         # ✅ 测试运行脚本
```

### 错误处理规范 ✅
- 使用自定义异常类继承体系
- 详细的错误日志记录（使用structlog）
- AI分析失败时自动降级到传统方法
- 优雅的异常处理和重试机制
- 避免裸露的 except 语句

### 🧠 AI操作错误处理规范
```python
# AI增强功能的错误处理
class AIAnalysisError(AgentHubException):
    """AI分析相关异常"""
    pass

class ModelClientError(AIAnalysisError):
    """模型客户端异常"""
    pass

# AI操作重试装饰器
def ai_operation_retry(max_attempts: int = 3, fallback_enabled: bool = True):
    """AI操作重试装饰器"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except (ModelClientError, json.JSONDecodeError) as e:
                    last_exception = e
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(2 ** attempt)  # 指数退避
                        continue
                    break
                except Exception as e:
                    # 不可重试的异常
                    if fallback_enabled:
                        return await fallback_function(*args, **kwargs)
                    raise e
            
            # 所有重试失败，使用降级方案
            if fallback_enabled:
                logger.warning("AI操作失败，使用降级方案", error=str(last_exception))
                return await fallback_function(*args, **kwargs)
            
            raise last_exception
        
        return wrapper
    return decorator
```

### 安全要求 ✅
- 敏感信息必须通过环境变量或加密配置管理
- API 密钥通过多层防护机制保护
- 日志中不得记录敏感信息（使用数据脱敏）
- 所有外部 API 调用使用 HTTPS
- 操作审计和完整的历史追踪
- 发布前自动安全扫描

### 测试要求 ✅
- **回归测试覆盖率100%**: 所有核心功能必须有回归测试覆盖
- **新功能同步测试**: 开发新功能时必须同步添加测试项
- **AI功能专项测试**: AI模型调用、智能分析等功能的专门测试
- **集成测试覆盖**: 前后端、AI模型、浏览器操作的集成测试
- **测试数据管理**: 使用37个历史任务数据进行真实场景测试

## 🚀 当前开发任务优先级 (v2.2.0)

### 🚨 高优先级 (本周完成)
1. **前端服务稳定性优化** 
   - 解决前端服务启动和连接问题（当前测试成功率81.8%）
   - 优化Vite开发服务器配置和依赖管理
   - 确保前端服务持续运行，解决端口3001访问问题

2. **Manus平台深度集成**
   - 利用现有AI模型客户端实现端到端自动化
   - 集成AI页面分析 + 智能操作 + 文件处理流程
   - 基于37个历史任务数据优化操作策略

3. **Chrome连接模块优化**
   - 增强浏览器会话管理和状态检测
   - 优化多实例并发处理和资源管理
   - 提升浏览器连接的稳定性和可靠性

### 🔶 中优先级 (下周完成)
4. **多平台扩展**
   - 深化Skywork平台集成，利用现有AI能力
   - 完善Coze Space平台功能
   - 实现跨平台任务对比和分析

5. **生产环境部署优化**
   - Docker容器化部署配置优化
   - 监控告警系统集成
   - 性能优化和资源管理

6. **AI功能深化**
   - 优化AI浏览器引擎操作策略生成（当前75%成功率）
   - 增强AI文件处理的多格式支持
   - 实现AI驱动的智能命题生成

### 🟢 低优先级 (后续迭代)
7. **企业级功能**: 用户管理、权限控制、多租户支持
8. **高级分析功能**: 知识图谱构建、多步推理、深度洞察
9. **云端集成**: 云存储、云计算、弹性扩展

## 最佳实践

### 🧠 AI集成最佳实践
- **模型选择**: 优先使用Google Gemini 2.5 Flash，支持多提供商切换
- **容错处理**: AI分析失败时自动降级到传统方法，确保功能可用性
- **性能优化**: 合理使用缓存，避免重复的AI调用
- **结果验证**: AI分析结果必须验证，关键操作需要置信度评分
- **持续改进**: 收集AI操作反馈，优化提示词和策略

### 🔧 回归测试最佳实践
- **测试优先**: 每次开发前先运行回归测试，确保基础功能正常
- **增量测试**: 新功能开发时同步添加对应的测试项
- **快速反馈**: 测试失败时立即停止开发，优先修复问题
- **详细分析**: 查看测试报告JSON文件，分析失败原因和成功率趋势
- **定期监控**: 利用定时测试功能，持续监控系统健康状态

### 异步编程 ✅
- 优先使用 async/await 语法
- 合理使用 asyncio.gather() 进行并发处理
- 使用 asyncio.Semaphore 控制并发数量
- 避免在异步函数中使用同步阻塞操作
- AI模型调用使用异步接口，提升响应性能

### 🔒 安全最佳实践
- **配置分离**: 开发配置(.local)与发布配置(.sample)完全分离
- **环境变量优先**: 生产环境优先使用环境变量配置API密钥
- **自动扫描**: 发布前运行prepare_release.sh进行安全扫描
- **日志脱敏**: 使用mask_sensitive_data()函数处理敏感信息
- **定期审计**: 检查配置文件和日志，确保无敏感信息泄露

### 日志记录 ✅
```python
# AI增强功能的结构化日志
logger.info(
    "AI页面分析完成",
    platform="manus",
    analysis_type="page_structure",
    elements_found=len(elements),
    confidence=analysis.confidence,
    processing_time=processing_time,
    model_provider="gemini",
    success=True,
    user_id=mask_user_id(user_id)  # 敏感信息脱敏
)
```

### 配置管理 ✅
- 环境变量优先级最高（生产环境）
- 本地配置文件(.local)用于开发环境
- 示例配置文件(.sample)用于GitHub发布
- 配置验证和默认值设置
- 敏感配置自动加密存储

### 监控告警 ✅
- 健康检查端点（/health）- 当前正常运行
- 回归测试监控（当前81.8%成功率）
- 性能指标收集（Prometheus格式）
- AI模型调用统计和成功率监控
- 异常情况告警机制（通过日志和测试报告）

## 开发工作流

### 分支管理 ✅
- main: 主分支，稳定版本（当前c4bef08）
- develop: 开发分支
- feature/*: 功能分支（如 feature/frontend-stability, feature/manus-deep-integration）
- hotfix/*: 紧急修复分支

### 🔧 提交规范 (v2.1.3)
```bash
# AI功能开发
feat(ai): 新增智能页面分析功能
feat(model): 添加多提供商模型切换支持
feat(browser): 实现AI驱动的元素定位策略

# 测试和质量
test(regression): 添加AI功能回归测试覆盖
fix(test): 修复前端服务测试连接问题
perf(ai): 优化AI模型调用性能和缓存机制

# 安全和配置
security(config): 强化API密钥保护机制
feat(isolation): 完善开发与发布文件隔离
docs(security): 更新安全配置指南

# 平台集成
feat(manus): 深化Manus平台AI增强集成
feat(multi-platform): 优化跨平台任务管理
fix(chrome): 修复浏览器连接稳定性问题
```

### 代码审查要点 ✅
- **功能完整性**: 新功能是否完整实现，是否有对应的测试覆盖
- **AI集成规范**: AI调用是否遵循统一接口，是否有降级方案
- **错误处理**: 异常处理是否完善，边界条件是否考虑
- **安全性检查**: 敏感信息是否正确处理，配置是否安全
- **测试覆盖**: 回归测试是否通过，新功能是否有测试项
- **性能影响**: 对系统性能的影响评估
- **文档更新**: 相关文档是否同步更新

## 🎯 下一阶段开发计划

### Week 1-2: 稳定性和集成优化
- [ ] 修复前端服务连接问题，确保100%测试通过率
- [ ] 完成Manus平台深度集成，实现AI驱动的端到端自动化
- [ ] 优化Chrome连接模块，增强稳定性和并发处理

### Week 3-4: 多平台扩展和生产优化  
- [ ] 扩展Skywork和其他平台的AI增强集成
- [ ] 完善Docker部署和监控告警系统
- [ ] 实现AI驱动的智能命题生成功能

### Week 5-8: 企业级功能和高级AI
- [ ] 开发用户管理和权限控制系统
- [ ] 实现知识图谱和多步推理功能
- [ ] 云端集成和弹性扩展支持

---

本开发规则基于 AgentHub v2.1.3 制定，已完成AI增强系统、回归测试系统和安全文件隔离机制。当前重点是前端稳定性优化和多平台深度集成，为企业级部署做好准备。请确保团队成员熟悉并遵循这些规范，特别是AI集成、回归测试和安全开发相关的标准。 